## Common Dwarf Mongoose

![Common Dwarf Mongoose](http://upload.wikimedia.org/wikipedia/commons/thumb/5/5f/Helogale_parvula_qtl1.jpg/498px-Helogale_parvula_qtl1.jpg)

### Mongoose with some synthetic sugar

---

**Installation**

Its not in the NPM registry by now, so install from the git repository:

```sh
npm install "https://github.com/datenspiel/common_dwarf_mongoose/tarball/vVERSION"
```

where VERSION is one of the tarballs listed [here](https://github.com/datenspiel/common_dwarf_mongoose/tags).

**Note**: 
This may be something you want if you like to get your Node.js stuff done with CoffeeScript and you want
a model definition which similiar the model definitions in ExtJs.

<code>Mongoose.Base</code> is the superclass for all database related models. 

It combines creation of a Mongo schema and a mongoose model. Additional it
provides some synthetic sugar around this:

Let's say, we want to store a collection of authors in our MongoDB. 

(**Note**: Connect to your MongoDB just [like this says](http://github.com/datenspiel/common_dwarf_mongoose/blob/master/connection.mdown) )

To use <code>Mongoose.Base</code> require the module:

```coffeescript
require 'common_dwarf_mongoose'
```

Define the model:

```coffeescript
class Author extends Mongoose.Base
  
  alias: 'author'

  fields:
    name    : {type : String, index: true}
    blog    : {type : String, default: "http://blogpost.com"}
    alive   : {type : Boolean,default: false}
```

The <code>alias</code> property is used to name the collection. This is done by pluralizing 
the alias which is inspired by Ruby On Rails in a very simple way:

```
author => authors
user => users
blog_post => blog_posts
```

But still

```
people => peoples
```

which is obviously wrong. There is no inflector used within #pluralize.

Any options documented from [Mongoose](http://mongoosejs.com/docs/schematypes.html) are possible with the following deviantions:

* To use ObjectId use Mongoose.ObjectId
* To use 'any' Type (Schema.Types.Mixed) use Mongoose.Mixed 

The class takes care about reating a schema and a mongoose model like documented [here](http://mongoosejs.com/docs/model-definition.html).

With the addition of synthetic sugar it allows us:

```coffeescript
author = new Author()
author.set('name':'Jack Kerouac')
author.set('blog':'www.ontheroad.com')

author.save((err)-> throw err if err)
```

Mass assignment is not supported at the moment. 

Accessing saved authors is also easy. Maybe you know this from ActiveRecord or 
Backbone.js:

```coffeescript
Author.find({},(err,authorDocuments)->
  for authorAsDocument in authorDocuments
    author = Author.becomesFrom(author)
    console.log author.getName()
    console.log author.getBlog()
)
```

Notice the last two lines before the parenthesis.

Any attribute you define in <code>fields</code> will be accessible with a
get prefix after a model is instantiated and an attribute is assigned.

```coffeescript
author.getBlog()
author.getName()
```

If you define a boolean attribute in <code>fields</code> the getter will be 
more context understandable:

```coffeescript
author.isAlive()
```

Another option to get an attribute is calling <code>#get()</code>, which is also
well know from backbone.js or ExtJs:

```coffeescript
author.get('name') #=> 'Jack Kerouac'
```

To get all attributes which are set at once, use the <code>#attributes</code> property:

```coffeescript
author.attributes #=> {name: 'Jack Kerouac', blog: 'www.ontheroad.com'}
```

If you need a JSON representation of your model's data, you can achieve this with <code>#toJSON()</code> method:

```coffeescript
author.toJSON() #=> {'name' : 'Jack Kerouac', 'blog' : 'www.ontheroad.com'}
```

**Mixin support**

Common Dwarf Mongoose provides mixin support which is accessible if you require the library:

```coffeescript
require 'common_dwarf_mongoose'
```

Any class which inherits from <code>Mixin.Base</code> could include or extend functionality 
with JavaScript objects:

```coffeescript
Extensions.documentation = 
  kind:->
    "paper"

Extensions.folder = 
  folderType:->
    "extensions"


class A extends Mixin.Base
  @include Extensions.documentation
  @extend Extensions.folder

class B extends Mixin.Base
  @include Extensions.documentation
  @extend Extensions.folder

a = new A()
b = new B()

console.log a.kind()
console.log b.kind()

console.log A.folderType()
console.log B.folderType()
```

Common Dwarf Mongoose provides a global namespace called **Extensions** which could be used to 
collect all your mixin modules within a single namespace. 

### Author

---

Daniel Schmidt, Datenspiel GmbH 2012