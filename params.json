{"name":"Common dwarf mongoose","body":"## Common Dwarf Mongoose\r\n\r\n![Common Dwarf Mongoose](http://upload.wikimedia.org/wikipedia/commons/thumb/5/5f/Helogale_parvula_qtl1.jpg/498px-Helogale_parvula_qtl1.jpg)\r\n\r\n### Mongoose with some synthetic sugar\r\n\r\nCommon Dwarf Mongoose is a little wrapper around the excellent Mongoose ORM library. It provides some synthetic sugar like attributes and a more ExtJS/Backbone.js inspired way to define database models.\r\n\r\n---\r\n\r\n**Installation**\r\n\r\nInstalling is very easy, get it from the NPM registry:\r\n\r\n```sh\r\nnpm install common_dwarf_mongoose\r\n```\r\n\r\n**Usage**\r\n\r\n<code>Mongoose.Base</code> is the superclass for all database related models. \r\n\r\nIt combines creation of a Mongo schema and a mongoose model. Additional it\r\nprovides some synthetic sugar around this:\r\n\r\nLet's say, we want to store a collection of authors in our MongoDB. \r\n\r\n(**Note**: Connect to your MongoDB just [like this says](http://github.com/datenspiel/common_dwarf_mongoose/blob/master/connection.mdown) )\r\n\r\nTo use <code>Mongoose.Base</code> require the module:\r\n\r\n```coffeescript\r\nrequire 'common_dwarf_mongoose'\r\n```\r\n\r\nDefine the model:\r\n\r\n```coffeescript\r\nclass Author extends Mongoose.Base\r\n  \r\n  alias: 'author'\r\n\r\n  fields:\r\n    name    : {type : String, index: true}\r\n    blog    : {type : String, default: \"http://blogpost.com\"}\r\n    alive   : {type : Boolean,default: false}\r\n```\r\n\r\nThe <code>alias</code> property is used to name the collection. This is done by pluralizing \r\nthe alias which is inspired by Ruby On Rails in a very simple way:\r\n\r\n```\r\nauthor => authors\r\nuser => users\r\nblog_post => blog_posts\r\n```\r\n\r\nBut still\r\n\r\n```\r\npeople => peoples\r\n```\r\n\r\nwhich is obviously wrong. There is no inflector used within #pluralize.\r\n\r\nAny options documented from [Mongoose](http://mongoosejs.com/docs/schematypes.html) are possible with the following deviantions:\r\n\r\n* To use ObjectId use Mongoose.ObjectId\r\n* To use 'any' Type (Schema.Types.Mixed) use Mongoose.Mixed \r\n\r\nThe class takes care about reating a schema and a mongoose model as documented [here](http://mongoosejs.com/docs/model-definition.html).\r\n\r\nWith the addition of synthetic sugar it allows us:\r\n\r\n```coffeescript\r\nauthor = new Author()\r\nauthor.set('name':'Jack Kerouac')\r\nauthor.set('blog':'www.ontheroad.com')\r\n\r\nauthor.save((err)-> throw err if err)\r\n```\r\n\r\nMass assignment is not supported at the moment. \r\n\r\nAccessing saved authors is also easy. Maybe you know this from ActiveRecord or \r\nBackbone.js:\r\n\r\n```coffeescript\r\nAuthor.find({},(err,authorDocuments)->\r\n  for authorAsDocument in authorDocuments\r\n    author = Author.becomesFrom(author)\r\n    console.log author.getName()\r\n    console.log author.getBlog()\r\n)\r\n```\r\n(Also supported are <code>#findById</code> and <code>findByOne</code>.)\r\n\r\nNotice the last two lines before the parenthesis.\r\n\r\nAny attribute you define in <code>fields</code> will be accessible with a\r\nget prefix after a model is instantiated and an attribute is assigned.\r\n\r\n```coffeescript\r\nauthor.getBlog()\r\nauthor.getName()\r\n```\r\n\r\nIf you define a boolean attribute in <code>fields</code> the getter will be \r\nmore context understandable:\r\n\r\n```coffeescript\r\nauthor.isAlive()\r\n```\r\n\r\nAnother option to get an attribute is calling <code>#get()</code>, which is also\r\nwell know from backbone.js or ExtJs:\r\n\r\n```coffeescript\r\nauthor.get('name') #=> 'Jack Kerouac'\r\n```\r\n\r\nTo get all attributes at once, use the <code>#attributes</code> property:\r\n\r\n```coffeescript\r\nauthor.attributes #=> {name: 'Jack Kerouac', blog: 'www.ontheroad.com'}\r\n```\r\n\r\nIf you need a JSON representation of your model's data, you can achieve this with <code>#toJSON()</code> method:\r\n\r\n```coffeescript\r\nauthor.toJSON() #=> {'name' : 'Jack Kerouac', 'blog' : 'www.ontheroad.com'}\r\n```\r\n\r\n**Plugins**\r\n\r\nCommon Dwarf Mongoose also supports plugins like you know them from mongoose. Adding them to your model is \r\neasy as defining fields:\r\n\r\nWrite a plugin or use an existing one:\r\n\r\n```coffeescript\r\nlastModified = (schema, options)->\r\n  schema.add({ lastMod: Date })\r\n\r\n  schema.pre('save', (next)->\r\n    this.lastMod = new Date\r\n    next()\r\n  )\r\n\r\n  schema.path('lastMod').index(options.index) if (options && options.index)\r\n```\r\n\r\nAdd the plugin to the model:\r\n\r\n```coffeescript\r\nclass Author extends Mongoose.Base\r\n  \r\n  alias: 'author'\r\n\r\n  fields:\r\n    name    : {type : String, index: true}\r\n    blog    : {type : String, default: \"http://blogpost.com\"}\r\n    alive   : {type : Boolean,default: false}\r\n\r\n  plugins:\r\n    plugin: lastModified, config: {index: true}\r\n\r\n```\r\n\r\nThat's it.\r\n\r\n**Multiple connections**\r\n\r\nIf you have to handle documents scattered at different databases it would be nice to handle this within the model definition.\r\nUnfortunately, adding database names to a common_dwarf_mongoose model is not possible due the fact it is mongoose based.\r\nBut a solution is to add a connection instance to your model. \r\n\r\n```coffeescript\r\npersonnel_db  = mongo.createConnection(\"mongodb://0.0.0.0/personnel\")\r\ntasks_db      = mongo.createConnection(\"mongodb://0.0.0.0/tasks\")\r\n\r\nclass FacilityManager extends Mongoose.Base\r\n\r\n  alias: 'manager'\r\n\r\n  fields:\r\n    name    : { type: String, index: true }\r\n    salary  : { type: Number } \r\n\r\n  connection: personnel_db\r\n\r\nclass Task extends Mongoose.Base\r\n\r\n  alias: 'task'\r\n\r\n  fields:\r\n    name    : { type: String,   index: true }\r\n    due_to  : { type: Date,     index:true  }\r\n    done    : { type: Boolean }\r\n\r\n  connection: tasks_db\r\n```\r\n\r\n*Note:* If you seperate your database connection handling from defining your models (say other files or modules),\r\n<code>connection</code> must be global or otherwise accessable. \r\n\r\n**Querying**\r\n\r\nTo use <code>#where()</code>\r\n\r\n```coffeescript\r\nActor.forWhere()\r\n .where('age').gte(25)\r\n .where('tags').in(['movie', 'music', 'art'])\r\n . #  select('name', 'age', 'tags')\r\n .skip(20)\r\n .limit(10)\r\n .asc('age')\r\n .slaveOk()\r\n .hint({ age: 1, name: 1 })\r\n .run(callback)\r\n```\r\n\r\n**Aggregating**\r\n\r\nYou can use <code>#count</code> of course.\r\n\r\n**Mixin support**\r\n\r\nCommon Dwarf Mongoose provides mixin support which is accessible if you require the library:\r\n\r\n```coffeescript\r\nrequire 'common_dwarf_mongoose'\r\n```\r\n\r\nAny class which inherits from <code>Mixin.Base</code> could include or extend functionality \r\nwith JavaScript objects:\r\n\r\n```coffeescript\r\nExtensions.documentation = \r\n  kind:->\r\n    \"paper\"\r\n\r\nExtensions.folder = \r\n  folderType:->\r\n    \"extensions\"\r\n\r\n\r\nclass A extends Mixin.Base\r\n  @include Extensions.documentation\r\n  @extend Extensions.folder\r\n\r\nclass B extends Mixin.Base\r\n  @include Extensions.documentation\r\n  @extend Extensions.folder\r\n\r\na = new A()\r\nb = new B()\r\n\r\nconsole.log a.kind()\r\nconsole.log b.kind()\r\n\r\nconsole.log A.folderType()\r\nconsole.log B.folderType()\r\n```\r\n\r\nCommon Dwarf Mongoose provides a global namespace called **Extensions** which could be used to \r\ncollect all your mixin modules within a single namespace. \r\n\r\n### Authors and Contributors\r\nWritten by Daniel Schmidt(@dsci), Datenspiel GmbH 2012\r\n\r\nThe picture above was taken by [Quartl](http://commons.wikimedia.org/wiki/User:Quartl).\r\n\r\n### Support or Contact\r\nHaving trouble with Common Dwarf Mongoose? Do not hesitate to open an issue at the [Issue Tracker](https://github.com/datenspiel/common_dwarf_mongoose/issues) :octocat: .","tagline":"Mongoose with some synthetic sugar.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}